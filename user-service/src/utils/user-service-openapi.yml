openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: API for managing users
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: 'Use the secure token as a security measure.'
paths:
  /users:
    post:
      summary: Create a new user
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                gender:
                  type: string
                  enum: ['male', 'female', 'non-binary', 'not-specified']
                  example: 'not-specified'
              required:
                - firstName
                - lastName
                - gender
                - email
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                  _id:
                    type: string
                    example: "66b126517c9da40aeb2a2fd9"
                  firstName:
                    type: string
                    example: "John"
                  lastName:
                    type: string
                    example: "Doe"
                  email:
                    type: string
                    example: "john.doe@example.com"
                  gender:
                    type: string
                    example: "non-binary"
        400:
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Invalid input data"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Unauthorized"
  /users/{id}:
    get:
      summary: Retrieve user details by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve
      responses:
        200:
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "66b132be26f982e8d80fea39"
                      firstName:
                        type: string
                        example: "testDiana420"
                      lastName:
                        type: string
                        example: "testSmith811"
                      email:
                        type: string
                        example: "dianasmith811@example.com"
                      gender:
                        type: string
                        example: "not-specified"
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-08-05T20:14:54.922Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-08-05T20:14:54.922Z"
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "User not found"
